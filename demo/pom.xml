<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.example</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>demo</name>
	<description>Demo project for Spring Boot</description>
	<modules>
		<module>subModule</module>
	</modules>

	<properties>
<!--		<java.version>17.0.8</java.version>-->
		<spring-boot.version>3.1.2</spring-boot.version>
		<native.maven.plugin.version>0.9.19</native.maven.plugin.version>
		<maven.compiler.version>3.8.1</maven.compiler.version>
		<maven.surefire.version>3.0.0-M5</maven.surefire.version>
		<maven.assembly.version>3.3.0</maven.assembly.version>
		<jacoco.maven.plugin.version>0.8.8</jacoco.maven.plugin.version>
		<jdk.version>17</jdk.version>
		<logback.version>1.4.4</logback.version>
		<slf4j.version>2.0.7</slf4j.version>
		<junit.version>4.13.2</junit.version>
		<junit.vintage.version>5.8.2</junit.vintage.version>
		<tracking.tags.sdk.version>1.8.6</tracking.tags.sdk.version>
		<main.class>com.mediaiq.caps.platform.userprofile.UserProfileServerStartUp</main.class>
		<mockito-core.version>4.2.0</mockito-core.version>
		<commons-io.version>2.11.0</commons-io.version>
		<google-api.version>1.32.2</google-api.version>
		<google-oauth-client.version>1.33.3</google-oauth-client.version>
		<lombok.version>1.18.26</lombok.version>
		<sonar.exclusions>**/tokens/*</sonar.exclusions>
		<sonar.organization>mediaiq</sonar.organization>
		<sonar.host.url>https://sonarcloud.io</sonar.host.url>
		<aggregate.report.dir>target/site/jacoco-ut/jacoco.xml</aggregate.report.dir>
		<sonar.coverage.jacoco.xmlReportPaths>${basedir}/${aggregate.report.dir}
		</sonar.coverage.jacoco.xmlReportPaths>
		<environment/>
		<build.number/>
		<release.tag/>
	</properties>

	<repositories>
		<repository>
			<id>miq-nexus-releases</id>
			<name>MediaIQ Repo</name>
			<url>https://build.dev.miqdigital.com/nexus/content/repositories/releases/</url>
		</repository>
		<repository>
			<id>miq-nexus-snapshots</id>
			<name>MediaIQ snapshot Repo</name>
			<url>https://build.dev.miqdigital.com/nexus/content/repositories/snapshots/</url>
		</repository>
		<repository>
			<id>central-maven-repo</id>
			<name>Central Maven Repo</name>
			<url>https://central.maven.org/maven2/</url>
		</repository>
	</repositories>

	<distributionManagement>
		<repository>
			<id>miq-nexus-releases</id>
			<url>https://build.dev.miqdigital.com/nexus/content/repositories/releases/</url>
		</repository>
		<snapshotRepository>
			<id>miq-nexus-snapshots</id>
			<url>https://build.dev.miqdigital.com/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>

	<dependencyManagement>
		<!-- this vintage dependency helps to run junit4 annotated tests (org.junit.Test) if this is
         not added sprint boot 2.5.5 was expecting org.junit.api.jupiter.Test annotations which is
         Junit 5 dependency.
          TODO: upgrade all the tests to junit 5 and remove this dependency-->
		<dependencies>
			<dependency>
				<groupId>org.junit.vintage</groupId>
				<artifactId>junit-vintage-engine</artifactId>
				<version>${junit.vintage.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>${logback.version}</version>
				<optional>false</optional>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
<!--		<dependency>-->
<!--			<groupId>org.springframework.cloud</groupId>-->
<!--			<artifactId>spring-cloud-bindings</artifactId>-->
<!--			<version>1.10.0</version>-->
<!--		</dependency>-->
	</dependencies>



<!--	<profiles>-->
<!--		<profile>-->
<!--			<id>native</id>-->
<!--			<build>-->
<!--				<pluginManagement>-->
<!--					<plugins>-->
<!--						<plugin>-->
<!--							<groupId>org.graalvm.buildtools</groupId>-->
<!--							<artifactId>native-maven-plugin</artifactId>-->
<!--							<version>${native.maven.plugin.version}</version>-->
<!--							<extensions>true</extensions>-->
<!--&lt;!&ndash;							<executions>&ndash;&gt;-->
<!--&lt;!&ndash;								<execution>&ndash;&gt;-->
<!--&lt;!&ndash;									<id>build-native</id>&ndash;&gt;-->
<!--&lt;!&ndash;									<goals>&ndash;&gt;-->
<!--&lt;!&ndash;										<goal>compile-no-fork</goal>&ndash;&gt;-->
<!--&lt;!&ndash;									</goals>&ndash;&gt;-->
<!--&lt;!&ndash;									<phase>package</phase>&ndash;&gt;-->
<!--&lt;!&ndash;								</execution>&ndash;&gt;-->
<!--&lt;!&ndash;								<execution>&ndash;&gt;-->
<!--&lt;!&ndash;									<id>test-native</id>&ndash;&gt;-->
<!--&lt;!&ndash;									<goals>&ndash;&gt;-->
<!--&lt;!&ndash;										<goal>test</goal>&ndash;&gt;-->
<!--&lt;!&ndash;									</goals>&ndash;&gt;-->
<!--&lt;!&ndash;									<phase>test</phase>&ndash;&gt;-->
<!--&lt;!&ndash;								</execution>&ndash;&gt;-->
<!--&lt;!&ndash;							</executions>&ndash;&gt;-->
<!--							<configuration>-->
<!--								<imageName>dynamic-demo</imageName>-->
<!--								<mainClass>com.example.demo.DemoApplication.java</mainClass>-->
<!--							</configuration>-->
<!--						</plugin>-->
<!--					</plugins>-->
<!--				</pluginManagement>-->
<!--			</build>-->
<!--		</profile>-->
<!--	</profiles>-->

<!--	<profiles>-->
<!--		<profile>-->
<!--			<id>native</id>-->
<!--			<build>-->
<!--				<pluginManagement>-->
<!--					<plugins>-->
<!--						<plugin>-->
<!--							<groupId>org.springframework.boot</groupId>-->
<!--							<artifactId>spring-boot-maven-plugin</artifactId>-->
<!--						</plugin>-->
<!--						<plugin>-->
<!--							<groupId>org.graalvm.buildtools</groupId>-->
<!--							<artifactId>native-maven-plugin</artifactId>-->
<!--							<executions>-->
<!--								<execution>-->
<!--									<id>build-image</id>-->
<!--									<goals>-->
<!--										<goal>compile-no-fork</goal>-->
<!--									</goals>-->
<!--								</execution>-->
<!--							</executions>-->
<!--						</plugin>-->
<!--					</plugins>-->
<!--				</pluginManagement>-->
<!--			</build>-->
<!--		</profile>-->
<!--	</profiles>-->

<!--	<build>-->
<!--		<plugins>-->
<!--			<plugin>-->
<!--				<groupId>org.graalvm.buildtools</groupId>-->
<!--				<artifactId>native-maven-plugin</artifactId>-->
<!--				<configuration>-->
<!--					&lt;!&ndash; imageName is used to set the name of the generated binary file &ndash;&gt;-->
<!--					<imageName>${project.artifactId}</imageName>-->
<!--					&lt;!&ndash; mainClass is used to specify the path to the main method class &ndash;&gt;-->
<!--					<mainClass>com.example.demo.DemoApplication</mainClass>-->
<!--					<buildArgs>-->
<!--						&#45;&#45;no-fallback-->
<!--						&#45;&#45;initialize-at-build-time=org.slf4j.LoggerFactory-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.channel.nio.AbstractNioChannel-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.channel.Channel-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.channel.socket.nio.SelectorProviderUtil-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.channel.ChannelHandlerMask$2-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.channel.ChannelHandlerMask-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.util.internal.SystemPropertyUtil-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.util.concurrent.DefaultPromise-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.util.NetUtilInitializations-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.channel.nio.NioEventLoop-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.resolver.AddressResolverGroup-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.resolver.dns.DirContextUtils-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.resolver.HostsFileEntriesProvider-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.resolver.HostsFileEntriesProvider-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.channel.AbstractChannelHandlerContext-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.util.concurrent.SingleThreadEventExecutor-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.util.internal.NativeLibraryLoader-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.resolver.HostsFileEntriesProvider-->
<!--						&#45;&#45;initialize-at-run-time=io.netty.util.concurrent.SingleThreadEventExecutor-->
<!--						&#45;&#45;initialize-at-run-time=io.netty-->
<!--					</buildArgs>-->
<!--				</configuration>-->
<!--				<executions>-->
<!--					<execution>-->
<!--						<id>build-native</id>-->
<!--						<goals>-->
<!--							<goal>compile-no-fork</goal>-->
<!--						</goals>-->
<!--						<phase>package</phase>-->
<!--					</execution>-->
<!--				</executions>-->
<!--			</plugin>-->
<!--			<plugin>-->
<!--				<groupId>org.springframework.boot</groupId>-->
<!--				<artifactId>spring-boot-maven-plugin</artifactId>-->
<!--&lt;!&ndash;				<configuration>&ndash;&gt;-->
<!--&lt;!&ndash;					<image>&ndash;&gt;-->
<!--&lt;!&ndash;						<bindings>&ndash;&gt;-->
<!--&lt;!&ndash;							<binding>${basedir}/bindings/ca-certificates:/platform/bindings/ca-certificates</binding>&ndash;&gt;-->
<!--&lt;!&ndash;						</bindings>&ndash;&gt;-->
<!--&lt;!&ndash;					</image>&ndash;&gt;-->
<!--&lt;!&ndash;				</configuration>&ndash;&gt;-->
<!--				<configuration>-->
<!--					<skip>true</skip>-->
<!--				</configuration>-->
<!--			</plugin>-->
<!--		</plugins>-->

<!--	</build>-->

	<build>
	<sourceDirectory>src/main/java</sourceDirectory>
	<testSourceDirectory>src/test/java</testSourceDirectory>
	<pluginManagement>
	<plugins>
		<plugin> <!-- builds a runnable jar with main class -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-maven-plugin</artifactId>
			<configuration>
				<skip>true</skip>
			</configuration>
		</plugin>
	<plugin>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-compiler-plugin</artifactId>
		<version>${maven.compiler.version}</version>
		<configuration>
			<source>${jdk.version}</source>
			<target>${jdk.version}</target>
		</configuration>
		<executions>
			<!-- Replacing default-compile as it is treated specially by maven -->
			<execution>
				<id>default-compile</id>
				<phase>none</phase>
			</execution>
			<!-- Replacing default-testCompile as it is treated specially by maven -->
			<execution>
				<id>default-testCompile</id>
				<phase>none</phase>
			</execution>
			<execution>
				<id>java-compile</id>
				<phase>compile</phase>
				<goals>
					<goal>compile</goal>
				</goals>
			</execution>
			<execution>
				<id>java-test-compile</id>
				<phase>test-compile</phase>
				<goals>
					<goal>testCompile</goal>
				</goals>
			</execution>
		</executions>
	</plugin>
	<plugin>
		<groupId>org.sonatype.plugins</groupId>
		<artifactId>nexus-staging-maven-plugin</artifactId>
		<version>1.6.8</version>
		<executions>
			<execution>
				<id>default-deploy</id>
				<phase>deploy</phase>
				<goals>
					<goal>deploy</goal>
				</goals>
			</execution>
		</executions>
		<configuration>
			<serverId>nexus</serverId>
			<nexusUrl>https://build.dev.miqdigital.com/nexus/</nexusUrl>
			<skipStaging>true</skipStaging>
		</configuration>
	</plugin>
	<plugin>
		<groupId>org.codehaus.mojo</groupId>
		<artifactId>exec-maven-plugin</artifactId>
		<version>3.0.0</version>
		<executions>
			<execution>
				<id>ecr-login</id>
				<phase>deploy</phase>
				<goals>
					<goal>exec</goal>
				</goals>
				<configuration>
					<!--'rootDirectory' variable is exposed by the directory-maven-plugin-->
					<executable>${rootDirectory}/../deployment/scripts/ecr-login.sh
					</executable>
				</configuration>
			</execution>
		</executions>
	</plugin>
		<plugin>
			<groupId>com.spotify</groupId>
			<artifactId>dockerfile-maven-plugin</artifactId>
			<version>1.4.13</version>
			<dependencies>
				<dependency>
					<groupId>javax.activation</groupId>
					<artifactId>activation</artifactId>
					<version>1.1.1</version>
				</dependency>
			</dependencies>
			<executions>
				<execution>
					<id>default</id>
					<goals>
						<goal>build</goal>
						<goal>push</goal>
					</goals>
				</execution>
			</executions>
			<configuration>
				<repository>836079437595.dkr.ecr.us-east-1.amazonaws.com/platform-services
				</repository>
				<tag>${project.artifactId}-${release.tag}${build.number}</tag>
				<buildArgs>
					<JAR_FILE>
						${project.artifactId}-${project.version}-jar-with-dependencies.jar
					</JAR_FILE>
				</buildArgs>
			</configuration>
		</plugin>
		<plugin>
			<groupId>io.fabric8</groupId>
			<artifactId>docker-maven-plugin</artifactId>
			<version>0.38.1</version>
		</plugin>
		<plugin>
			<groupId>org.jacoco</groupId>
			<artifactId>jacoco-maven-plugin</artifactId>
			<version>${jacoco.maven.plugin.version}</version>
			<executions>
				<execution>
					<id>pre-unit-test</id>
					<goals>
						<goal>prepare-agent</goal>
					</goals>
					<configuration>
						<destFile>
							${project.build.directory}/coverage-reports/jacoco-ut.exec
						</destFile>
						<propertyName>surefireArgLine</propertyName>
					</configuration>
				</execution>
				<execution>
					<id>post-unit-test</id>
					<phase>test</phase>
					<goals>
						<goal>report</goal>
					</goals>
					<configuration>
						<dataFile>
							${project.build.directory}/coverage-reports/jacoco-ut.exec
						</dataFile>
						<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut
						</outputDirectory>
					</configuration>
				</execution>
			</executions>
		</plugin>
		<!-- User for unit tests-->
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-surefire-plugin</artifactId>
			<version>${maven.surefire.version}</version>
			<configuration>
				<argLine>
					${surefireArgLine}
				</argLine>
				<excludes>
					<exclude>**/*/RunnerTest.java</exclude>
				</excludes>
			</configuration>
		</plugin>
	</plugins>
	</pluginManagement>

	<plugins>
		<!--This plugin will get the root directory of project and expose it in the variable 'rootDirectory'-->
		<plugin>
			<groupId>org.commonjava.maven.plugins</groupId>
			<artifactId>directory-maven-plugin</artifactId>
			<version>1.0</version>
			<executions>
				<execution>
					<id>directories</id>
					<goals>
						<goal>directory-of</goal>
					</goals>
					<phase>initialize</phase>
					<configuration>
						<property>rootDirectory</property>
						<project>
							<groupId>${project.groupId}</groupId>
							<artifactId>${project.artifactId}</artifactId>
						</project>
					</configuration>
				</execution>
			</executions>
		</plugin>
		<plugin>
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>build-helper-maven-plugin</artifactId>
			<version>3.2.0</version>
			<executions>
				<execution>
					<id>test</id>
					<phase>generate-sources</phase>
					<goals>
						<goal>add-source</goal>
					</goals>
					<configuration>
						<sources>
							<source>${basedir}/src/main</source>
						</sources>
					</configuration>
				</execution>
			</executions>
		</plugin>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-source-plugin</artifactId>
			<version>3.2.1</version>
			<executions>
				<execution>
					<id>attach-sources</id>
					<goals>
						<goal>jar</goal>
					</goals>
				</execution>
			</executions>
		</plugin>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-javadoc-plugin</artifactId>
			<version>3.3.1</version>
			<executions>
				<execution>
					<id>attach-javadocs</id>
					<goals>
						<goal>jar</goal>
					</goals>
				</execution>
			</executions>
		</plugin>
		<!--This plugin is responsible for building the docker image in the install phase-->
		<!--and pushing it to ecr repository in deploy phase. It uses the Dockerfile provided-->
		<!--alongside the pom in the project. You need to have docker installed to use this-->
		<plugin>
			<groupId>org.sonatype.plugins</groupId>
			<artifactId>nexus-staging-maven-plugin</artifactId>
		</plugin>
	</plugins>
	</build>
</project>
